'use strict';

const sql = require('sqlite3');
const { genTemplate } = require('site-template');
const aws = require('aws-sdk');
const fs = require('fs');
const path = require('path');
const cons = require('consolidate');
const buildHTML = require('build-html');

const s3 = new aws.S3({ region: 'us-east-1' });

const makePage = (Key, data) =>
  new Promise((resolve, reject) => {
    const params = {
      Bucket: process.env.bucket,
      Body: data,
      ContentType: 'text/html',
      Key,
    };

    s3.putObject(params, (rssErr, uploadData) => {
      if (rssErr) {
        reject(rssErr);
      }

      if (uploadData) {
        resolve(uploadData);
      }
    });
  });

const updateRSS = posts =>
  new Promise((resolve, reject) => {
    const rssPosts = posts.map(x => ({
      excerpt: x.excerpt,
      slug: x.slug,
      date: new Date(x.date).toUTCString(),
      title: x.title,
    }));

    const data = {
      now: new Date(posts[0].date).toUTCString(),
      posts: rssPosts,
    };

    cons.handlebars('rss.hbs', data, (err, html) => {
      if (err) {
        reject(err);
      } else {
        const params = {
          Bucket: process.env.bucket,
          Body: html,
          ContentType: 'application/xml',
          Key: 'rss.xml',
        };

        s3.putObject(params, (rssErr, uploadData) => {
          if (rssErr) {
            reject(rssErr);
          }

          if (uploadData) {
            resolve(uploadData);
          }
        });
      }
    });
  });

const buildIndexPages = (event, context, callback) => {
  let buildSteps = [];

  s3.getObject(
    {
      Bucket: 'ams-admin',
      Key: 'BLOG',
    },
    (err, data) => {
      if (err) {
        callback(err);
      }

      fs.writeFileSync('/tmp/BLOG', data.Body);
      const dbFile = path.join('/tmp/BLOG');
      const db = new sql.Database(dbFile);

      db.all('SELECT * from posts', (dbErr, dbData) => {
        const posts = dbData
          .map(x => ({
            excerpt: x.excerpt,
            content: x.content,
            slug: x.slug,
            date: x.pub_date,
            title: x.title,
          }))
          .reverse();
        const pages = Math.ceil(posts.length / 10);

        buildSteps.push(updateRSS(posts));

        posts.forEach((x, i) => {
          if (i <= pages) {
            const key = i === 0 ? 'index' : `page/${i}`;
            const start = i * 10;
            const segment = posts.slice(start, start + 10);
            const postData = {
              posts: segment,
              total: posts.length,
              current: i,
            };
            const { html } = buildHTML('list', postData);
            const temp = genTemplate(html);
            buildSteps.push(makePage(key, temp));
          }
        });

        if (dbErr) {
          callback(dbErr);
        } else {
          Promise.all(buildSteps)
            .then(() => callback(null, 'build done'))
            .catch(x => callback(x));
        }
      });
    }
  );
};

module.exports = buildIndexPages;
