'use strict';

const sql = require('sqlite3');
const React = require('react');
const ReactDOMServer = require('react-dom/server');
const App = require('react-app');
const template = require('site-template');
const aws = require('aws-sdk');
const fs = require('fs');
const path = require('path');
const cons = require('consolidate');

const s3 = new aws.S3({ region: 'us-east-1' });

const makeIndex = data =>
  new Promise((resolve, reject) => {
    const params = {
      Bucket: process.env.bucket,
      Body: data,
      ContentType: 'text/html',
      Key: 'index',
    };

    s3.putObject(params, (indexErr, uploadData) => {
      if (indexErr) {
        reject(indexErr);
      }

      if (uploadData) {
        resolve(uploadData);
      }
    });
  });

const updateRSS = data =>
  new Promise((resolve, reject) => {
    cons.handlebars('rss.hbs', data, (err, html) => {
      if (err) {
        reject(err);
      } else {
        const params = {
          Bucket: process.env.bucket,
          Body: html,
          ContentType: 'application/xml',
          Key: 'rss.xml',
        };

        s3.putObject(params, (rssErr, uploadData) => {
          if (rssErr) {
            reject(rssErr);
          }

          if (uploadData) {
            resolve(uploadData);
          }
        });
      }
    });
  });

const writePages = (cb, page, title, data) =>
  new Promise((resolve, reject) => {
    const ele = React.createElement(App['react-app'], {
      component: 'list',
      data,
    });
    const html = ReactDOMServer.renderToString(ele);
    const perma = '';
    const desc = 'The design and development log of Adam Simpson.';
    const params = {
      Bucket: process.env.bucket,
      Body: template(title, desc, html, perma),
      ContentType: 'text/html',
      Key: `page/${page}`,
    };

    s3.putObject(params, (err, uploadData) => {
      if (err) {
        reject(err);
      }

      if (uploadData) {
        resolve(uploadData);
      }
    });
  });

const buildIndexPages = (event, context, callback) => {
  const buildSteps = [];

  s3.getObject(
    {
      Bucket: 'ams-admin',
      Key: 'BLOG',
    },
    (err, data) => {
      if (err) {
        callback(err);
      }

      fs.writeFileSync('/tmp/BLOG', data.Body);
      const dbFile = path.join('/tmp/BLOG');
      const db = new sql.Database(dbFile);

      db.all('SELECT * from posts', (dbErr, dbData) => {
        const posts = dbData
          .map(x => ({
            excerpt: x.excerpt,
            slug: x.slug,
            date: x.pub_date,
            title: x.title,
          }))
          .reverse();

        const rssPosts = posts.map(x => ({
          excerpt: x.excerpt,
          slug: x.slug,
          date: new Date(x.date).toUTCString(),
          title: x.title,
        }));

        const rss = {
          now: new Date(posts[0].date).toUTCString(),
          posts: rssPosts,
        };

        buildSteps.push(updateRSS(rss));

        const pages = Math.ceil(posts.length / 10);

        for (let i = 0; i <= pages; i += 1) {
          let segment;
          let postData = {};

          if (i === 0) {
            segment = posts.slice(0, i + 10);
            postData = {
              posts: segment,
              total: posts.length,
              current: i,
            };

            const ele = React.createElement(App.app, {
              component: 'list',
              data: postData,
            });
            const home = ReactDOMServer.renderToString(ele);
            const temp = template(
              'adamsimpson.net',
              'The design and development log of Adam Simpson.',
              home,
              ''
            );
            buildSteps.push(makeIndex(temp));
          } else {
            segment = posts.slice(i * 10, i * 10 + 10);

            if (segment.length) {
              postData = {
                posts: segment,
                total: posts.length,
                current: i,
              };

              buildSteps.push(
                writePages(callback, i, 'adamsimpson.net', postData)
              );
            }
          }
        }
        if (dbErr) {
          callback(dbErr);
        } else {
          Promise.all(buildSteps)
            .then(() => callback(null, 'build done'))
            .catch(x => callback(x));
        }
      });
    }
  );
};

module.exports = buildIndexPages;
