'use strict';

const sql = require('sqlite3');
const fs = require('fs');
const aws = require('aws-sdk');

const BLOG = '/tmp/BLOG';
const s3 = new aws.S3({ region: 'us-east-1' });
const { microTemplate } = require('site-template');

const persistDB = (cb, thisDb, event) => {
  const db = fs.readFileSync(BLOG);
  const params = {
    Bucket: 'ams-admin',
    Key: event.network === 'micro' ? 'SOCIAL' : 'BLOG',
    Body: db,
  };

  s3.putObject(params, err => {
    if (err) {
      cb(JSON.stringify(err));
    } else {
      cb(null, JSON.stringify(thisDb));
    }
  });
};

const writeMicroPost = post =>
  new Promise((resolve, reject) => {
    const params = {
      Bucket: 'ams-blog',
      Key: `micro/${post.id}`,
      ContentType: 'text/html',
      Body: microTemplate(post.post, post.id, post.date, post.formattedDate),
    };

    s3.putObject(params, err => {
      if (err) {
        reject(JSON.stringify(err));
      } else {
        resolve();
      }
    });
  });

const newPost = (event, con, cb) => {
  s3.getObject(
    {
      Bucket: 'ams-admin',
      Key: event.network === 'micro' ? 'SOCIAL' : 'BLOG',
    },
    (err, data) => {
      if (err) {
        cb(JSON.stringify(err));
      }

      fs.writeFileSync(BLOG, data.Body);
      const db = new sql.Database(BLOG);

      if (event.network === 'micro') {
        let id;
        const date = new Date().getTime();
        db.serialize(function() {
          db.get(
            'select rowid from social order by rowid desc limit 1',
            function(err, data) {
              id = data.rowid + 1;
              db.run(
                'INSERT INTO social VALUES($post, $postdate, $post_id, $reply_to, $network)',
                {
                  $post: event.post,
                  $postdate: date,
                  $post_id: id,
                  $reply_to: '',
                  $network: 'micro',
                },
                function newRun(insertErr) {
                  if (insertErr) {
                    cb(JSON.stringify(insertErr));
                  } else {
                    writeMicroPost({
                      id,
                      date,
                      post: event.post,
                      formattedDate: new Date(date).toUTCString(),
                    }).then(x => persistDB(cb, this, event));
                  }
                }
              );
            }
          );
        });
      } else {
        db.run(
          'INSERT INTO posts VALUES($id, $title, $pub_date, $mod_date, $content, $slug, $status, $excerpt, $type)',
          {
            $id: null,
            $title: event.title,
            $pub_date: event.date,
            $mod_date: event.mod_date,
            $content: event.post,
            $slug: event.slug,
            $status: 'published',
            $excerpt: event.excerpt,
            $type: 'post',
          },
          function newRun(insertErr) {
            if (insertErr) {
              cb(JSON.stringify(insertErr));
            } else {
              persistDB(cb, this, event);
            }
          }
        );
      }
    }
  );
};

module.exports = newPost;
