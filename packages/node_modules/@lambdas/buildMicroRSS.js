'use strict';

const sql = require('sqlite3');
const aws = require('aws-sdk');
const fs = require('fs');
const path = require('path');

const s3 = new aws.S3({ region: 'us-east-1' });
const cf = new aws.CloudFront();

const genFeed = posts =>
  new Promise((resolve, reject) => {
    const jsonPosts = posts.filter(x => x.network === 'micro').map(x => ({
      content_html: x.post,
      id: x.post_id,
      url: `https://adamsimpson.net/micro/${x.post_id}`,
      date_published: new Date(parseInt(x.postdate, 10)).toISOString(),
    }));

    const feed = {
      version: 'https://jsonfeed.org/version/1',
      title: 'micro blog feed',
      home_page_url: 'https://adamsimpson.net',
      feed_url: 'https://adamsimpson.net/micro/feed.json',
      items: jsonPosts,
    };

    const params = {
      Bucket: process.env.bucket,
      Body: JSON.stringify(feed),
      ContentType: 'application/json',
      Key: 'micro/feed.json',
    };

    resolve(params);
  });

const clear = () =>
  new Promise((resolve, reject) => {
    const cfParams = {
      DistributionId: process.env.cf,
      InvalidationBatch: {
        CallerReference: `${Date.now()}`,
        Paths: {
          Quantity: 1,
          Items: ['/micro/*'],
        },
      },
    };

    cf.createInvalidation(cfParams, (err, data) => {
      if (err) {
        console.log(`ðŸ”¥ Error running: ${err}`);
        reject(err);
      } else {
        console.log(`âœ… Done: ${JSON.stringify(data)}`);
        resolve();
      }
    });
  });

const buildMicroRSS = (event, context, callback) => {
  s3.getObject(
    {
      Bucket: 'ams-admin',
      Key: 'SOCIAL',
    },
    (err, data) => {
      if (err) {
        callback(err);
      }

      fs.writeFileSync('/tmp/SOCIAL', data.Body);
      const dbFile = path.join('/tmp/SOCIAL');
      const db = new sql.Database(dbFile);

      db.all('SELECT * from social', (dbErr, dbData) => {
        const posts = dbData
          .map(x => ({
            post: x.post,
            network: x.network,
            postdate: x.postdate,
            post_id: x.post_id,
          }))
          .reverse()
          .slice(0, 20);

        genFeed(posts).then(x => {
          s3.putObject(x, (rssErr, uploadData) => {
            if (rssErr) {
              callback(rssErr);
            }

            if (uploadData) {
              clear()
                .then(callback(null, uploadData))
                .catch(err => callback(err));
            }
          });
        });
      });
    }
  );
};

module.exports = buildMicroRSS;
