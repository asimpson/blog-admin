'use strict';

const sql = require('sqlite3');
const aws = require('aws-sdk');
const fs = require('fs');
const path = require('path');
const cons = require('consolidate');

const s3 = new aws.S3({ region: 'us-east-1' });

const updateRSS = posts =>
  new Promise((resolve, reject) => {
    const rssPosts = posts.filter(x => x.network === 'micro').map(x => ({
      content: x.post,
      postdate: new Date(parseInt(x.postdate, 10)).toUTCString(),
      post_id: x.post_id,
    }));

    const data = {
      now: new Date(parseInt(rssPosts[0].postdate, 10)).toUTCString(),
      posts: rssPosts,
    };

    cons.handlebars(
      './packages/node_modules/micro-rss.hbs',
      data,
      (err, html) => {
        if (err) {
          reject(err);
        } else {
          const params = {
            Bucket: process.env.bucket,
            Body: html,
            ContentType: 'application/xml',
            Key: 'micro/rss.xml',
          };

          s3.putObject(params, (rssErr, uploadData) => {
            if (rssErr) {
              reject(rssErr);
            }

            if (uploadData) {
              resolve(uploadData);
            }
          });
        }
      }
    );
  });

const buildMicroRSS = (event, context, callback) => {
  s3.getObject(
    {
      Bucket: 'ams-admin',
      Key: 'SOCIAL',
    },
    (err, data) => {
      if (err) {
        callback(err);
      }

      fs.writeFileSync('/tmp/SOCIAL', data.Body);
      const dbFile = path.join('/tmp/SOCIAL');
      const db = new sql.Database(dbFile);

      db.all('SELECT * from social', (dbErr, dbData) => {
        const posts = dbData
          .map(x => ({
            post: x.post,
            network: x.network,
            postdate: x.postdate,
            post_id: x.post_id,
          }))
          .reverse()
          .slice(0, 20);

        updateRSS(posts)
          .then(x => callback(null, 'done'))
          .catch(err => callback(err));
      });
    }
  );
};

module.exports = buildMicroRSS;
